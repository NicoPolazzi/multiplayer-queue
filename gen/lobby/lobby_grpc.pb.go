// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: proto/lobby.proto

package lobby

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LobbyServiceClient is the client API for LobbyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyServiceClient interface {
	// Creates a new lobby. The creator is inferred from the authentication context.
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*Lobby, error)
	GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*Lobby, error)
	ListAvailableLobbies(ctx context.Context, in *ListAvailableLobbiesRequest, opts ...grpc.CallOption) (*ListAvailableLobbiesResponse, error)
	// Allows a user to join an existing lobby. The user joining is inferred
	// from the authentication context.
	JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*Lobby, error)
}

type lobbyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyServiceClient(cc grpc.ClientConnInterface) LobbyServiceClient {
	return &lobbyServiceClient{cc}
}

func (c *lobbyServiceClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*Lobby, error) {
	out := new(Lobby)
	err := c.cc.Invoke(ctx, "/lobby.LobbyService/CreateLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*Lobby, error) {
	out := new(Lobby)
	err := c.cc.Invoke(ctx, "/lobby.LobbyService/GetLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) ListAvailableLobbies(ctx context.Context, in *ListAvailableLobbiesRequest, opts ...grpc.CallOption) (*ListAvailableLobbiesResponse, error) {
	out := new(ListAvailableLobbiesResponse)
	err := c.cc.Invoke(ctx, "/lobby.LobbyService/ListAvailableLobbies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*Lobby, error) {
	out := new(Lobby)
	err := c.cc.Invoke(ctx, "/lobby.LobbyService/JoinLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServiceServer is the server API for LobbyService service.
// All implementations must embed UnimplementedLobbyServiceServer
// for forward compatibility
type LobbyServiceServer interface {
	// Creates a new lobby. The creator is inferred from the authentication context.
	CreateLobby(context.Context, *CreateLobbyRequest) (*Lobby, error)
	GetLobby(context.Context, *GetLobbyRequest) (*Lobby, error)
	ListAvailableLobbies(context.Context, *ListAvailableLobbiesRequest) (*ListAvailableLobbiesResponse, error)
	// Allows a user to join an existing lobby. The user joining is inferred
	// from the authentication context.
	JoinLobby(context.Context, *JoinLobbyRequest) (*Lobby, error)
	mustEmbedUnimplementedLobbyServiceServer()
}

// UnimplementedLobbyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServiceServer struct {
}

func (UnimplementedLobbyServiceServer) CreateLobby(context.Context, *CreateLobbyRequest) (*Lobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedLobbyServiceServer) GetLobby(context.Context, *GetLobbyRequest) (*Lobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLobby not implemented")
}
func (UnimplementedLobbyServiceServer) ListAvailableLobbies(context.Context, *ListAvailableLobbiesRequest) (*ListAvailableLobbiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableLobbies not implemented")
}
func (UnimplementedLobbyServiceServer) JoinLobby(context.Context, *JoinLobbyRequest) (*Lobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedLobbyServiceServer) mustEmbedUnimplementedLobbyServiceServer() {}

// UnsafeLobbyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServiceServer will
// result in compilation errors.
type UnsafeLobbyServiceServer interface {
	mustEmbedUnimplementedLobbyServiceServer()
}

func RegisterLobbyServiceServer(s grpc.ServiceRegistrar, srv LobbyServiceServer) {
	s.RegisterService(&LobbyService_ServiceDesc, srv)
}

func _LobbyService_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lobby.LobbyService/CreateLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_GetLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).GetLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lobby.LobbyService/GetLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).GetLobby(ctx, req.(*GetLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_ListAvailableLobbies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableLobbiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).ListAvailableLobbies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lobby.LobbyService/ListAvailableLobbies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).ListAvailableLobbies(ctx, req.(*ListAvailableLobbiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lobby.LobbyService/JoinLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).JoinLobby(ctx, req.(*JoinLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LobbyService_ServiceDesc is the grpc.ServiceDesc for LobbyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobbyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lobby.LobbyService",
	HandlerType: (*LobbyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLobby",
			Handler:    _LobbyService_CreateLobby_Handler,
		},
		{
			MethodName: "GetLobby",
			Handler:    _LobbyService_GetLobby_Handler,
		},
		{
			MethodName: "ListAvailableLobbies",
			Handler:    _LobbyService_ListAvailableLobbies_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _LobbyService_JoinLobby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lobby.proto",
}
